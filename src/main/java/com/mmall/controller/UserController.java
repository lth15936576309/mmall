package com.mmall.controller;import com.mmall.common.Constant;import com.mmall.common.SystemResponse;import com.mmall.pojo.User;import com.mmall.service.IUserService;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpSession;@RestController@RequestMapping("/user/")public class UserController {    private static Logger logger = LoggerFactory.getLogger(UserController.class);    @Autowired    private IUserService userService;    /**     * 用户登录     *     * @param username     * @param password     * @param session     * @return     */    @RequestMapping(value = "/login", method = RequestMethod.POST)    public SystemResponse<User> login(String username, String password, HttpSession session) {        try {            logger.info(username + password + ">>>");            SystemResponse<User> response = userService.login(username, password);            if (response.isSuccess()) {                session.setAttribute(Constant.CURRENT_USER, response.getData());            }            return response;        } catch (Exception e) {            logger.info("login接口出现异常："+ e.getMessage());            return SystemResponse.getErrorResponse("接口出现异常：" + e.getMessage());        }    }    /**     * 登出     *     * @param session     * @return     */    @RequestMapping(value = "logout", method = RequestMethod.POST)    public SystemResponse<String> logout(HttpSession session) {        session.removeAttribute(Constant.CURRENT_USER);        return SystemResponse.getSuccessResponse("登出成功");    }    /**     * 注册     *     * @param user     * @return     */    @RequestMapping(value = "register", method = RequestMethod.POST)    public SystemResponse<String> register(@RequestBody User user) {        try {            logger.info(user + ">>>>>");            return userService.register(user);        } catch (Exception e) {            logger.info("调用register接口出现异常:" + e.getMessage());            return SystemResponse.getErrorResponse("调用register接口出现异常:" + e.getMessage());        }    }    /**     * 校验用户填写数据的有效性     *     * @param str     * @param type     * @return     */    @RequestMapping(value = "checkValid", method = RequestMethod.POST)    public SystemResponse<String> checkValid(String str, String type) {        return userService.checkValid(str, type);    }    @RequestMapping(value = "getUserInfo", method = RequestMethod.POST)    public SystemResponse<User> getUserInfo(HttpSession session) {        User user = (User) session.getAttribute(Constant.CURRENT_USER);        if (user != null) {            return SystemResponse.getSuccessResponse("获取用户信息成功", user);        }        return SystemResponse.getErrorResponse("获取用户信息失败");    }    @RequestMapping(value = "checkAnswer", method = RequestMethod.POST)    public SystemResponse<String> checkAnswer(String username, String question, String answer) {        return userService.checkAnswer(username, question, answer);    }    @RequestMapping(value = "resetPassword", method = RequestMethod.POST)    public SystemResponse<String> resetPassword(String username, String newPassword, String token) {        try {            logger.info("-----开始调用resetPassword接口-----");            return userService.resetPasswordByToken(username, newPassword, token);        } catch (Exception e) {            logger.info("调用resetPassword接口出现异常:" + e.getMessage());            return SystemResponse.getErrorResponse("接口出现异常" + e.getMessage());        }    }}